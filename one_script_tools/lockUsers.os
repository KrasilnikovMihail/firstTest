#Использовать v8runner
#Использовать cmdline

Перем СЕРВЕР;
Перем СЕРВЕР_ПОРТ;
Перем БАЗА;
Перем ЭТО_ФАЙЛОВАЯ_БАЗА;
Перем ПОЛЬЗОВАТЕЛЬ;
Перем ПАРОЛЬ;
Перем ПЛАТФОРМА_ВЕРСИЯ;
Перем РАБОЧИЙ_КАТАЛОГ;
Перем ПОРТ_АГЕНТА_СЕРВЕРА;
Перем ПОРТ_КЛАСТЕРА;
Перем ИМЯ_АДМИНИСТРАТОРА_КЛАСТЕРА;
Перем ПАРОЛЬ_АДМИНИСТРАТОРА_КЛАСТЕРА;
Перем КОМ_КОННЕКТОР;

Перем Лог;
Перем Действие;

Функция Инициализация()

    Парсер = Новый ПарсерАргументовКоманднойСтроки();
    Парсер.ДобавитьИменованныйПараметр("-platform");
    Парсер.ДобавитьИменованныйПараметр("-server");
    Парсер.ДобавитьИменованныйПараметр("-base");
    Парсер.ДобавитьИменованныйПараметр("-user");
    Парсер.ДобавитьИменованныйПараметр("-passw");
    Парсер.ДобавитьИменованныйПараметр("-action");

    Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);
    
    ПЛАТФОРМА_ВЕРСИЯ  = Параметры["-platform"];//"8.3.10.2639"; // если пустая строка, то будет взята последняя версия
    СЕРВЕР            =  Параметры["-server"];
    СЕРВЕР_ПОРТ       = 1541; // 1541 - по умолчанию
    БАЗА              =  Параметры["-base"];
    ЭТО_ФАЙЛОВАЯ_БАЗА = Ложь;
    ПОЛЬЗОВАТЕЛЬ      = Параметры["-user"];
    ПАРОЛЬ            = Параметры["-passw"];
    Действие          = Параметры["-action"];

    Лог = Логирование.ПолучитьЛог("disableCfgSupport");

    ПОРТ_КЛАСТЕРА                  = СЕРВЕР_ПОРТ;
    ПОРТ_АГЕНТА_СЕРВЕРА            = 1540; // 1540 - по умолчанию
    ИМЯ_АДМИНИСТРАТОРА_КЛАСТЕРА    = "";
    ПАРОЛЬ_АДМИНИСТРАТОРА_КЛАСТЕРА = "";
    КОМ_КОННЕКТОР = "V83.COMConnector";

КонецФункции

Процедура ЗавершитьСеансыИУстановитьБлокировку()

    Соединение = УстановитьВнешнееСоединениеСБазой();

    Соединение.СоединенияИБ.УстановитьБлокировкуСоединений(
        НСтр("ru = 'в связи с необходимостью обновления конфигурации.'"), "ПакетноеОбновлениеКонфигурацииИБ");

    ПараметрыАдминистрирования = Соединение.СоединенияИБВызовСервера.ПараметрыАдминистрирования();
    ПараметрыАдминистрирования.АдресАгентаСервера = СЕРВЕР;
    ПараметрыАдминистрирования.ПортКластера = ПОРТ_КЛАСТЕРА;
    ПараметрыАдминистрирования.ПортАгентаСервера = ПОРТ_АГЕНТА_СЕРВЕРА;
    ПараметрыАдминистрирования.ИмяАдминистратораКластера = ИМЯ_АДМИНИСТРАТОРА_КЛАСТЕРА;
    ПараметрыАдминистрирования.ПарольАдминистратораКластера = ПАРОЛЬ_АДМИНИСТРАТОРА_КЛАСТЕРА;
    ПараметрыАдминистрирования.ИмяАдминистратораИнформационнойБазы = ПОЛЬЗОВАТЕЛЬ;
    ПараметрыАдминистрирования.ИмяВКластере = БАЗА;
    ПараметрыАдминистрирования.ПарольАдминистратораИнформационнойБазы = ПАРОЛЬ;
    ПараметрыАдминистрирования.ТипПодключения = "COM";

    Соединение.АдминистрированиеКластераКлиентСервер.УдалитьСеансыИнформационнойБазы(ПараметрыАдминистрирования);
    // Альтернативный вариант
    //Соединение.СоединенияИБКлиентСервер.УдалитьВсеСеансыКромеТекущего(ПараметрыАдминистрирования);

КонецПроцедуры

// Устанавливает внешнее соединение с информационной базой по переданным параметрам подключения и возвращает указатель
    // на это соединение.
    //
    // Параметры:
    //  ПараметрыПодключения - Структура - Параметры подключения к информационной базе (см. в ОбновитьИнформационнуюБазу()).
    //
    // Возвращаемое значение:
    //  COMОбъект, Неопределено - указатель на COM-объект соединения или Неопределено в случае ошибки;
    //
Функция УстановитьВнешнееСоединениеСБазой(АутентификацияОперационнойСистемы = Ложь, ФайловыйВариантРаботы = Ложь)
        
        Попытка
            COMОбъект = Новый COMОбъект(КОМ_КОННЕКТОР);
            Лог.Информация("New com cobject has been created");
        Исключение
            Лог.Ошибка(СтрШаблон(НСтр("ru = 'Не удалось создать COM соединение:
                |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
            Возврат Неопределено;
        КонецПопытки;
    
        // Формирование строки соединения.
        ШаблонСтрокиСоединения = "[СтрокаБазы][СтрокаАутентификации];UC=ПакетноеОбновлениеКонфигурацииИБ";
    
        Если ФайловыйВариантРаботы Тогда
            СтрокаБазы = "File = ""&КаталогИнформационнойБазы""";
            СтрокаБазы = СтрЗаменить(СтрокаБазы, "&КаталогИнформационнойБазы", БАЗА);
        Иначе
            СтрокаБазы = "Srvr = ""&ИмяСервера1СПредприятия""; Ref = ""&ИмяИнформационнойБазыНаСервере1СПредприятия""";
            СтрокаБазы = СтрЗаменить(СтрокаБазы, "&ИмяСервера1СПредприятия", СЕРВЕР + ? (ЗначениеЗаполнено(СЕРВЕР_ПОРТ), ":" + СЕРВЕР_ПОРТ, ""));
            СтрокаБазы = СтрЗаменить(СтрокаБазы, "&ИмяИнформационнойБазыНаСервере1СПредприятия", БАЗА);
        КонецЕсли;
    
        Если АутентификацияОперационнойСистемы Тогда
            СтрокаАутентификации = "";
        Иначе
            СтрокаАутентификации = "; Usr = ""&ИмяПользователя""; Pwd = ""&ПарольПользователя""";
            СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ИмяПользователя",    ПОЛЬЗОВАТЕЛЬ);
            СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ПарольПользователя", ПАРОЛЬ);
        КонецЕсли;
    
        СтрокаСоединения = СтрЗаменить(ШаблонСтрокиСоединения, "[СтрокаБазы]", СтрокаБазы);
        СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "[СтрокаАутентификации]", СтрокаАутентификации);
    
        Попытка
            Соединение = COMОбъект.Connect(СтрокаСоединения);
            Лог.Информация("Connection to the base has been established");
        Исключение
            Лог.Ошибка(СтрШаблон(НСтр("ru = 'Не удалось подключится к другой программе:
                |%1, строка соединения %2'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтрокаСоединения));
            Возврат Неопределено;
        КонецПопытки;
    
        Возврат Соединение;
            
КонецФункции

Процедура СнятьБлокировкуСеансовИЗаданийИнформационнойБазы()

    Соединение = УстановитьВнешнееСоединениеСБазой();
    Соединение.СоединенияИБ.РазрешитьРаботуПользователей();

КонецПроцедуры

Функция СтрокаСоединенияИБ() 
    Если ЭТО_ФАЙЛОВАЯ_БАЗА Тогда
        Возврат "/F" + БАЗА; 
    Иначе   
        Возврат "/IBConnectionString""Srvr=" + СЕРВЕР + ?(ЗначениеЗаполнено(СЕРВЕР_ПОРТ),":" + СЕРВЕР_ПОРТ,"") + ";Ref='"+ БАЗА + "'""";
    КонецЕсли;
КонецФункции

Попытка 
    Инициализация();
    Если Действие = "lock" Тогда
        Лог.Информация("Disabling users...");
        ЗавершитьСеансыИУстановитьБлокировку();
        Лог.Информация("Users disabled successfully");
    ИначеЕсли Действие = "unlock" Тогда
        Лог.Информация("Enabling user connections...");
        СнятьБлокировкуСеансовИЗаданийИнформационнойБазы();
        Лог.Информация("User connections enabled");
    Иначе
        Лог.Ошибка("Wrong action...");
    КонецЕсли;
Исключение
    Лог.Ошибка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
КонецПопытки