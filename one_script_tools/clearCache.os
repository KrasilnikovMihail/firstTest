#Использовать cmdline
#Использовать v8runner

Перем ЛОГ;
Перем СЕРВЕР;
Перем ЮЗЕР_ОТБОР;
Перем ОТБОР_БАЗ;

Процедура Инициализация()

    ЛОГ = Логирование.ПолучитьЛог("dropdb");
    ЛОГ.УстановитьУровень(УровниЛога.Отладка);

    Парсер = Новый ПарсерАргументовКоманднойСтроки();

    Парсер.ДобавитьИменованныйПараметр("-server");
    Парсер.ДобавитьИменованныйПараметр("-userfilter");
    Парсер.ДобавитьИменованныйПараметр("-basefilter");

    Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);
    СЕРВЕР = СокрЛП(Параметры["-server"]);
    ЮЗЕР_ОТБОР = СокрЛП(Параметры["-userfilter"]);
    База_ОТБОР = СокрЛП(Параметры["-basefilter"]);

    //СЕРВЕР = "devpglz";
    //ЮЗЕР_ОТБОР = Неопределено;
    //База_ОТБОР = "rkudakov_upp_pglz";

    ОТБОР_БАЗ = Новый Массив;
    ОТБОР_БАЗ.Добавить(База_ОТБОР);

    ЛОГ.Отладка("СЕРВЕР = %1", СЕРВЕР);
    ЛОГ.Отладка("ЮЗЕР_ОТБОР = %1", ЮЗЕР_ОТБОР);
    ЛОГ.Отладка("ОТБОР_БАЗ = %1", ОТБОР_БАЗ.Количество());
    
КонецПроцедуры

Процедура ОчиститьКлиентскийКеш()

    documentsFolders = ПолучитьПапкуПользователей();
    Для каждого documentsFolder Из documentsFolders Цикл
        ЛОГ.Отладка("documentsFolder = %1", documentsFolder);
        МассивФайлов = НайтиФайлы(documentsFolder, "*", Ложь);
        ЛОГ.Отладка("МассивФайлов = %1", МассивФайлов.Количество());
        Для каждого КаталогЮзераФайл Из МассивФайлов Цикл  
            ЛОГ.Отладка("Processing user folder = %1..." , КаталогЮзераФайл.Имя);
            Если ЗначениеЗаполнено(ЮЗЕР_ОТБОР) И Не (НРег(КаталогЮзераФайл.Имя) = НРег(ЮЗЕР_ОТБОР)) Тогда
                Продолжить;
            КонецЕсли;
            ИдентификаторыБаз = ПрочитатьИдентификаторыБаз(КаталогЮзераФайл);
            УдалитьКлиентскийКешБаз(ИдентификаторыБаз, КаталогЮзераФайл);
        КонецЦикла;
    КонецЦикла;

КонецПроцедуры

Функция ПолучитьПапкуПользователей() 

    КаталогиПользователей = Новый Массив;
    Shell = Новый COMОбъект("WScript.Shell");
    КаталогиПользователей.Добавить(Shell.ExpandEnvironmentStrings("%homedrive%") + "/users"); // Не работает на нодах дженкинса в сервисном режиме
    КаталогиПользователей.Добавить("C:\Users");
    КаталогиПользователей.Добавить("D:\Users");
    КаталогиПользователей.Добавить("E:\Users");

    Возврат КаталогиПользователей;

КонецФункции

Функция ПрочитатьИдентификаторыБаз(КаталогЮзераФайл)

    ИдентификаторыБаз = Новый Массив;

    Попытка

        ПутьКФайлуIBases = СтрШаблон("%1\AppData\Roaming\1C\1CEStart\ibases.v8i", КаталогЮзераФайл.ПолноеИмя);

        Лог.Информация("Reading ibases.v8i for %1...", ПутьКФайлуIBases);

        Файл = Новый Файл(ПутьКФайлуIBases);
        Если Не Файл.Существует() Тогда
            Лог.Информация("File ibases.v8i not found");
            Возврат ИдентификаторыБаз;
        КонецЕсли;

        ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуIBases);
        СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
        
        КлючиБаз = Новый Соответствие();
        Ключ = "Connect=";
        ЗначениеКлюча = "ID=";

        Пока СтрокаТекста <> Неопределено Цикл
            Если СтрНачинаетсяС(СтрокаТекста, Ключ) Тогда
                КлючСтрока = НРег(СокрЛП(СтрЗаменить(СтрокаТекста, Ключ, "")));
                СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
                ЗначениеКлючаСтрока = НРег(СокрЛП(СтрЗаменить(СтрокаТекста, ЗначениеКлюча, "")));
                КлючиБаз.Вставить(КлючСтрока, ЗначениеКлючаСтрока);
            КонецЕсли;
            СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
        КонецЦикла;
        
        Для каждого База Из ОТБОР_БАЗ Цикл
            ЗначениеКлючаСтрока = КлючиБаз.Получить(СтрШаблон("srvr=""%2"";ref=""%1"";", НРег(СокрЛП(База)), НРег(СокрЛП(СЕРВЕР))));
            Если ЗначениеКлючаСтрока <> Неопределено Тогда
                ИдентификаторыБаз.Добавить(ЗначениеКлючаСтрока);
                Лог.Информация("Infobase %1 with id %2 was found in ibases.v8i %3.", База, ЗначениеКлючаСтрока, ПутьКФайлуIBases);
            Иначе
                Лог.Информация("Infobase %1 is not found in ibases.v8i %2.", База, ПутьКФайлуIBases);
            КонецЕсли;
        КонецЦикла;

    Исключение
        // Мы вынуждены обернуть в попытку, т.к. может возникнуть System.UnauthorizedAccessException, которое прерывает цикл
        Лог.Информация(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

    Возврат ИдентификаторыБаз;

КонецФункции

Процедура УдалитьКлиентскийКешБаз(ИдентификаторыБаз, КаталогЮзераФайл)

    Для каждого ИдБазы Из ИдентификаторыБаз Цикл
        
        ФайлыКеша = Новый Массив;
        ФайлыКеша.Добавить(СтрШаблон("%1\AppData\Roaming\1C\1cv8\%2", КаталогЮзераФайл.ПолноеИмя, ИдБазы));
        ФайлыКеша.Добавить(СтрШаблон("%1\AppData\Local\1C\1cv8\%2", КаталогЮзераФайл.ПолноеИмя, ИдБазы));

        Для каждого ФайлКеша Из ФайлыКеша Цикл
            Попытка 
                УдалитьФайлы(ФайлКеша);
                Лог.Информация("Client cache file %1 deleted!", ФайлКеша);
            Исключение
                // Мы вынуждены обернуть в попытку, т.к. может возникнуть System.UnauthorizedAccessException, которое прерывает цикл
                Лог.Информация(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
            КонецПопытки;
        КонецЦикла;
        
    КонецЦикла
    
КонецПроцедуры

Сообщить("Initialization...");
Инициализация();
ЛОГ.Информация("Initialization completed");
ЛОГ.Информация("Clearing client cache...");
ОчиститьКлиентскийКеш();
ЛОГ.Информация("Clearing client cache task completed");